#!/bin/bash

################################################################################
# *
# * Copyright Jean-Marc Aury / Institut de Genomique / DSV / CEA
# *                            <jmaury@genoscope.cns.fr>
# *           Amin Madoui    / Institut de Genomique / DSV / CEA
# *                            <amadoui@genoscope.cns.fr>
# *           Stefan Engelen / Institut de Genomique / DSV / CEA
# *                            <sengelen@genoscope.cns.fr>
# *
# * This software, called NaS is a computer program whose purpose is to
# * build high-quality synthetic reads by using Illumina and Oxford Nanopore
# * sequencing technologies
# *
# * This software is governed by the CeCILL license under French law and
# * abiding by the rules of distribution of free software.  You can  use,
# * modify and/ or redistribute the software under the terms of the CeCILL
# * license as circulated by CEA, CNRS and INRIA at the following URL
# * "http://www.cecill.info".
# *
# * As a counterpart to the access to the source code and  rights to copy,
# * modify and redistribute granted by the license, users are provided only
# * with a limited warranty  and the software's author,  the holder of the
# * economic rights,  and the successive licensors  have only  limited
# * liability.
# *
# * In this respect, the user's attention is drawn to the risks associated
# * with loading,  using,  modifying and/or developing or reproducing the
# * software by the user in light of its specific status of free software,
# * that may mean  that it is complicated to manipulate,  and  that  also
# * therefore means  that it is reserved for developers  and  experienced
# * professionals having in-depth computer knowledge. Users are therefore
# * encouraged to load and test the software's suitability as regards their
# * requirements in conditions enabling the security of their systems and/or
# * data to be ensured and,  more generally, to use and operate it in the
# * same conditions as regards security.
# *
# * The fact that you are presently reading this means that you have had
# * knowledge of the CeCILL license and that you accept its terms.
################################################################################
VERSION=v2.0

set -o pipefail

function usage(){
    printf "NaS ($VERSION): a fast hybrid strategy to generate long and error-free reads\n"
    printf "\t--fq1        : illumina reads (R1) in fastQ format\n"
    printf "\t--fq2        : illumina reads (R2) in fastQ format\n"
    printf "\t--nano       : nanopore long reads in fastA format\n"
    printf "\t--out        : Output directory, default is NaS_date_pid\n"
    printf "\t--mode    : mode : fast or sensitive. fast mode use blat as aligner whereas sensitive mode use last, default is fast"
    printf "\t--tile       : ONLY in fast mode : tile size parameter of blat, default is 10\n"
    printf "\t--step       : ONLY in fast mode : step size parameter of blat, default is 5\n"
    printf "\t--a	       : ONLY in sensitive mode : gap existence cost parameter of last, default is 1\n"
    printf "\t--b	       : ONLY in sensitive mode : gap extension cost parameter of last, default is 1\n"
    printf "\t--e	       : ONLY in sensitive mode : score threshold parameter of last, default is 40\n"
    printf "\t--nb_proc    : Number of parallel task, default is 1\n"
    printf "\t-h           : help message\n\n"
    printf "Warning : At the moment, we only supported the following fastq format :\n"
    printf "    - The sequence name line have to be a one field line\n"
    printf "    - Sequence names have to end with '/1' (read1) and '/2' (read2)\n"
    printf "Example :\n"
    printf "@M2:A5KR6:1:1101:9590:1008/1\n"
    printf "ACTCAAAGAACAAGAGTTACAGTCTAAAAAAGCTGCGGTTGC...\n"
    printf "+\n"
    printf "8ACCGGGGGGGGGGGGGGGGGGFGGGGGGGGGGGGGGGGGGG...\n"
    exit 0
}
 
if [ $# -eq 0 ]
then
    usage
fi

BLAT=blat
MODE=fast
A=1
B=1
E=40
TILE=10
STEP=5
ILMN_R1=
ILMN_R2=
NANO_READS=
NB_PROC=1
STAMP=$(date +%d%m%Y)
OUTPUT_DIR=NaS_${STAMP}_$$
COMPAREADS=compareads2
EXTRACTREADS=extract_reads
UNTANGLE_GRAPH=untangle_complex_regions
NEWBLER=runAssembly

while :; do
    case "$1" in
        -h) usage;
            exit 0;;
        --tile)
	    TILE=$2
	    shift 2
	    ;;
        --step)
	    STEP=$2
	    shift 2
	    ;;
        --fq1)
	    ILMN_R1=$2
	    shift 2
	    ;;
	--fq2)
	    ILMN_R2=$2
	    shift 2
	    ;;
	--nano)
	    NANO_READS=$2
	    shift 2
	    ;;
	--out)
	    OUTPUT_DIR=$2
	    shift 2
	    ;;
	--nb_proc)
	    NB_PROC=$2
	    shift 2
	    ;; 
	--mode)
		MODE=$2
		shift 2
		;;
	--a)
		A=$2
		shift 2
		;;
	--b)
		B=$2
		shift 2
		;;
	--e)
		E=$2
		shift 2
	;;
    --) 
	    shift; 
	    break;;
	
	-?*)
	    printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
	    exit 1
	    ;;
	*)               # Default case: If no more options then break out of the loop.
	    break
    esac
done

echo "Number of parallel task : $NB_PROC" 
d=`date`
echo "[$d] Create output directory : "$OUTPUT_DIR
mkdir -p $OUTPUT_DIR $OUTPUT_DIR/tmp $OUTPUT_DIR/reads $OUTPUT_DIR/reads2 $OUTPUT_DIR/compareads $OUTPUT_DIR/assemblies

d=`date`
echo "[$d] Create fasta file from fastq..."
cat $ILMN_R1 $ILMN_R2 | paste - - - - | awk '{ print $1; print $2; }' | sed "s/@/>/" | FastaToTbl | TblToFasta > $OUTPUT_DIR/tmp/ILMN_reads.fa
paste $ILMN_R1 $ILMN_R2 | paste - - - - | awk '{ gsub(/\/1$/, "", $1); print $1, $3, $4, $7, $8; }' > $OUTPUT_DIR/tmp/ILMN_inlinereads.fastq

d=`date`
echo "[$d] Alignement step in $MODE mode..."
if [ "$MODE" == "fast" ]; then
	cat $OUTPUT_DIR/tmp/ILMN_reads.fa | parallel -j $NB_PROC --block 10M --pipe --recstart ">" "$BLAT -tileSize=$TILE -stepSize=$STEP -noHead $NANO_READS stdin >(cat) >&2" > $OUTPUT_DIR/tmp/blat-alignment.tile$TILE.step$STEP.psl 2>$OUTPUT_DIR/tmp/blat-alignment.stderr
elif [ "$MODE" == "sensitive" ]; then 
	lastdb -Q 0 $OUTPUT_DIR/tmp/nanolastdb $NANO_READS
	parallel-fasta -j $NB_PROC --block 10M "lastal -s 2 -T 0 -b $B -e $E -a $A -Q 0 $OUTPUT_DIR/tmp/nanolastdb" < $OUTPUT_DIR/tmp/ILMN_reads.fa > $OUTPUT_DIR/tmp/last-alignment.A$A.B$B.E$E.maf 2>$OUTPUT_DIR/tmp/last-alignment.stderr
	d=`date`
	echo "[$d] Convert maf file to psl file..."
	maf-convert --noheader psl $OUTPUT_DIR/tmp/last-alignment.A$A.B$B.E$E.maf > $OUTPUT_DIR/tmp/last-alignment.A$A.B$B.E$E.psl
fi

d=`date`
echo "[$d] Select reads..."
cat $OUTPUT_DIR/tmp/*.psl | awk -v PFX=$OUTPUT_DIR/reads '{ file=PFX"/"$14".psl"; print $0>file; }'

d=`date`
echo "[$d] Retrieve similar reads..."
ls -S $OUTPUT_DIR/reads/ | grep psl | sed "s/.psl//" | parallel -j $NB_PROC "selectReads -psl $OUTPUT_DIR/reads/{}.psl -reads $OUTPUT_DIR/tmp/ILMN_inlinereads.fastq -r1 $ILMN_R1 -r2 $ILMN_R2 -prefix $OUTPUT_DIR/tmp/ -name {} -out $OUTPUT_DIR/reads2/{}.fastq >(cat) >&2" > $OUTPUT_DIR/tmp/selectReads.stdout 2>$OUTPUT_DIR/tmp/selectReads.stderr

d=`date`
echo "[$d] Generate NaS reads..."
ls -S $OUTPUT_DIR/reads2/ | sed "s/.fastq//" | parallel -j $NB_PROC "mkdir $OUTPUT_DIR/assemblies/{}; cat $NANO_READS | FastaToTbl | awk -v seq={} '\$1==seq { print \$0; }' | TblToFasta > $OUTPUT_DIR/assemblies/{}/{}.fa; $NEWBLER -urt -force -noace -mi 99 -o $OUTPUT_DIR/assemblies/{} $OUTPUT_DIR/reads2/{}.fastq 1>$OUTPUT_DIR/assemblies/{}/runAssembly.out 2>$OUTPUT_DIR/assemblies/{}/runAssembly.err"

ls -S $OUTPUT_DIR/reads2/ | sed "s/.fastq//" | parallel -j $NB_PROC "$UNTANGLE_GRAPH -newblerdir $OUTPUT_DIR/assemblies/{} -nano $OUTPUT_DIR/assemblies/{}/{}.fa -name {} 2>$OUTPUT_DIR/assemblies/{}/stderr_untangle2"
cat $OUTPUT_DIR/assemblies/*/NaS_hqctg_reads_final.fa | FastaToTbl | perl -ne '@f=split; $f[1]=~/^([actgn]*)([ACTGN]+[ACTGNactgn]*[ACTGN]+)([actgn]*)$/; print $f[0], " ", $2, "\n";' | TblToFasta | sed "s=_contig[0-9]*\$==" > $OUTPUT_DIR/NaS_hqctg_reads.fa


d=`date`
echo "[$d] Generate statistics..."
assemblyMetrics $NANO_READS > $OUTPUT_DIR/NANO_reads.stats
assemblyMetrics $OUTPUT_DIR/NaS_hqctg_reads.fa > $OUTPUT_DIR/NaS_hqctg_reads.stats
for i in $OUTPUT_DIR/NANO_reads.stats $OUTPUT_DIR/NaS_hqctg_reads.stats; do cat $i | awk -v FILE=$i '$1=="N50" { n50=$3; } $1=="Assembly" { nbreads=$5; cum=$3; minS=$7; maxS=$9; avg=$11} END { print "NbReads= ", nbreads, " CumulativeSize= ", cum, " N50size= ", n50, " minSize= ", minS, " maxSize= ", maxS, " avgSize= ", avg, " => ", FILE; }'; done
